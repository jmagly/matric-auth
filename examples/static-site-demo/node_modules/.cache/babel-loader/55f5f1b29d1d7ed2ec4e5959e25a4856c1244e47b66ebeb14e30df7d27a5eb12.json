{"ast":null,"code":"import Keycloak from 'keycloak-js';\nclass KeycloakService {\n  constructor() {\n    this.keycloak = null;\n    this.initialized = false;\n  }\n  async init() {\n    if (this.initialized && this.keycloak) {\n      return this.keycloak;\n    }\n    console.log('Initializing Keycloak...');\n    this.keycloak = new Keycloak({\n      url: process.env.REACT_APP_KEYCLOAK_URL || 'http://localhost:8081',\n      realm: process.env.REACT_APP_KEYCLOAK_REALM || 'matric-dev',\n      clientId: process.env.REACT_APP_KEYCLOAK_CLIENT || 'matric-web'\n    });\n    try {\n      const authenticated = await this.keycloak.init({\n        onLoad: 'check-sso',\n        checkLoginIframe: false,\n        // Disable iframe check to prevent redirect loops\n        pkceMethod: 'S256',\n        silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html'\n      });\n      if (authenticated) {\n        console.log('User is authenticated');\n        console.log('Token:', this.keycloak.token);\n        console.log('User info:', this.keycloak.tokenParsed);\n        this.setupTokenRefresh();\n      } else {\n        console.log('User is not authenticated');\n      }\n      this.initialized = true;\n      return this.keycloak;\n    } catch (error) {\n      console.error('Failed to initialize Keycloak:', error);\n      throw error;\n    }\n  }\n  setupTokenRefresh() {\n    if (!this.keycloak) return;\n\n    // Refresh token when it expires\n    setInterval(async () => {\n      try {\n        var _this$keycloak;\n        if ((_this$keycloak = this.keycloak) !== null && _this$keycloak !== void 0 && _this$keycloak.authenticated) {\n          const refreshed = await this.keycloak.updateToken(30);\n          if (refreshed) {\n            console.log('Token refreshed');\n            this.onTokenRefresh();\n          }\n        }\n      } catch (error) {\n        console.error('Failed to refresh token:', error);\n        this.logout();\n      }\n    }, 30000);\n  }\n  onTokenRefresh() {\n    var _this$keycloak2;\n    window.dispatchEvent(new CustomEvent('keycloak-token-refreshed', {\n      detail: {\n        token: (_this$keycloak2 = this.keycloak) === null || _this$keycloak2 === void 0 ? void 0 : _this$keycloak2.token\n      }\n    }));\n  }\n  getKeycloak() {\n    return this.keycloak;\n  }\n  isAuthenticated() {\n    var _this$keycloak3;\n    return ((_this$keycloak3 = this.keycloak) === null || _this$keycloak3 === void 0 ? void 0 : _this$keycloak3.authenticated) || false;\n  }\n  getToken() {\n    var _this$keycloak4;\n    return (_this$keycloak4 = this.keycloak) === null || _this$keycloak4 === void 0 ? void 0 : _this$keycloak4.token;\n  }\n  getUserInfo() {\n    var _this$keycloak5;\n    return (_this$keycloak5 = this.keycloak) === null || _this$keycloak5 === void 0 ? void 0 : _this$keycloak5.tokenParsed;\n  }\n  hasRole(role) {\n    var _this$keycloak6, _tokenParsed$realm_ac, _tokenParsed$realm_ac2;\n    const tokenParsed = (_this$keycloak6 = this.keycloak) === null || _this$keycloak6 === void 0 ? void 0 : _this$keycloak6.tokenParsed;\n    return (tokenParsed === null || tokenParsed === void 0 ? void 0 : (_tokenParsed$realm_ac = tokenParsed.realm_access) === null || _tokenParsed$realm_ac === void 0 ? void 0 : (_tokenParsed$realm_ac2 = _tokenParsed$realm_ac.roles) === null || _tokenParsed$realm_ac2 === void 0 ? void 0 : _tokenParsed$realm_ac2.includes(role)) || false;\n  }\n  login() {\n    var _this$keycloak7;\n    (_this$keycloak7 = this.keycloak) === null || _this$keycloak7 === void 0 ? void 0 : _this$keycloak7.login();\n  }\n  logout() {\n    var _this$keycloak8;\n    (_this$keycloak8 = this.keycloak) === null || _this$keycloak8 === void 0 ? void 0 : _this$keycloak8.logout({\n      redirectUri: window.location.origin\n    });\n  }\n  register() {\n    var _this$keycloak9;\n    (_this$keycloak9 = this.keycloak) === null || _this$keycloak9 === void 0 ? void 0 : _this$keycloak9.register();\n  }\n  accountManagement() {\n    var _this$keycloak0;\n    (_this$keycloak0 = this.keycloak) === null || _this$keycloak0 === void 0 ? void 0 : _this$keycloak0.accountManagement();\n  }\n}\nconst keycloakService = new KeycloakService();\nexport default keycloakService;","map":{"version":3,"names":["Keycloak","KeycloakService","constructor","keycloak","initialized","init","console","log","url","process","env","REACT_APP_KEYCLOAK_URL","realm","REACT_APP_KEYCLOAK_REALM","clientId","REACT_APP_KEYCLOAK_CLIENT","authenticated","onLoad","checkLoginIframe","pkceMethod","silentCheckSsoRedirectUri","window","location","origin","token","tokenParsed","setupTokenRefresh","error","setInterval","_this$keycloak","refreshed","updateToken","onTokenRefresh","logout","_this$keycloak2","dispatchEvent","CustomEvent","detail","getKeycloak","isAuthenticated","_this$keycloak3","getToken","_this$keycloak4","getUserInfo","_this$keycloak5","hasRole","role","_this$keycloak6","_tokenParsed$realm_ac","_tokenParsed$realm_ac2","realm_access","roles","includes","login","_this$keycloak7","_this$keycloak8","redirectUri","register","_this$keycloak9","accountManagement","_this$keycloak0","keycloakService"],"sources":["/home/manitcor/dev/matric-auth/examples/static-site-demo/src/services/keycloak.ts"],"sourcesContent":["import Keycloak from 'keycloak-js';\n\nclass KeycloakService {\n  private keycloak: Keycloak | null = null;\n  private initialized = false;\n\n  async init(): Promise<Keycloak> {\n    if (this.initialized && this.keycloak) {\n      return this.keycloak;\n    }\n\n    console.log('Initializing Keycloak...');\n    \n    this.keycloak = new Keycloak({\n      url: process.env.REACT_APP_KEYCLOAK_URL || 'http://localhost:8081',\n      realm: process.env.REACT_APP_KEYCLOAK_REALM || 'matric-dev',\n      clientId: process.env.REACT_APP_KEYCLOAK_CLIENT || 'matric-web',\n    });\n\n    try {\n      const authenticated = await this.keycloak.init({\n        onLoad: 'check-sso',\n        checkLoginIframe: false,  // Disable iframe check to prevent redirect loops\n        pkceMethod: 'S256',\n        silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n      });\n\n      if (authenticated) {\n        console.log('User is authenticated');\n        console.log('Token:', this.keycloak.token);\n        console.log('User info:', this.keycloak.tokenParsed);\n        this.setupTokenRefresh();\n      } else {\n        console.log('User is not authenticated');\n      }\n\n      this.initialized = true;\n      return this.keycloak;\n    } catch (error) {\n      console.error('Failed to initialize Keycloak:', error);\n      throw error;\n    }\n  }\n\n  private setupTokenRefresh() {\n    if (!this.keycloak) return;\n\n    // Refresh token when it expires\n    setInterval(async () => {\n      try {\n        if (this.keycloak?.authenticated) {\n          const refreshed = await this.keycloak.updateToken(30);\n          if (refreshed) {\n            console.log('Token refreshed');\n            this.onTokenRefresh();\n          }\n        }\n      } catch (error) {\n        console.error('Failed to refresh token:', error);\n        this.logout();\n      }\n    }, 30000);\n  }\n\n  private onTokenRefresh() {\n    window.dispatchEvent(new CustomEvent('keycloak-token-refreshed', {\n      detail: { token: this.keycloak?.token }\n    }));\n  }\n\n  getKeycloak(): Keycloak | null {\n    return this.keycloak;\n  }\n\n  isAuthenticated(): boolean {\n    return this.keycloak?.authenticated || false;\n  }\n\n  getToken(): string | undefined {\n    return this.keycloak?.token;\n  }\n\n  getUserInfo(): any {\n    return this.keycloak?.tokenParsed;\n  }\n\n  hasRole(role: string): boolean {\n    const tokenParsed = this.keycloak?.tokenParsed as any;\n    return tokenParsed?.realm_access?.roles?.includes(role) || false;\n  }\n\n  login() {\n    this.keycloak?.login();\n  }\n\n  logout() {\n    this.keycloak?.logout({\n      redirectUri: window.location.origin\n    });\n  }\n\n  register() {\n    this.keycloak?.register();\n  }\n\n  accountManagement() {\n    this.keycloak?.accountManagement();\n  }\n}\n\nconst keycloakService = new KeycloakService();\nexport default keycloakService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}