{"ast":null,"code":"import Keycloak from \"keycloak-js\";\nconst _kc = new Keycloak('/keycloak.json');\n\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\nconst initKeycloak = onAuthenticatedCallback => {\n  _kc.init({\n    onLoad: 'check-sso',\n    silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    pkceMethod: 'S256'\n  }).then(authenticated => {\n    if (!authenticated) {\n      console.log(\"User is not authenticated\");\n    } else {\n      console.log(\"User is authenticated\");\n    }\n    // Always call the callback, regardless of authentication status\n    onAuthenticatedCallback();\n  }).catch(error => {\n    console.error(\"Keycloak init error:\", error);\n    onAuthenticatedCallback();\n  });\n};\nconst doLogin = _kc.login;\nconst doLogout = _kc.logout;\nconst getToken = () => _kc.token;\nconst getTokenParsed = () => _kc.tokenParsed;\nconst isLoggedIn = () => !!_kc.token;\nconst updateToken = successCallback => _kc.updateToken(5).then(successCallback).catch(doLogin);\nconst getUsername = () => {\n  var _kc$tokenParsed;\n  return (_kc$tokenParsed = _kc.tokenParsed) === null || _kc$tokenParsed === void 0 ? void 0 : _kc$tokenParsed.preferred_username;\n};\nconst getEmail = () => {\n  var _kc$tokenParsed2;\n  return (_kc$tokenParsed2 = _kc.tokenParsed) === null || _kc$tokenParsed2 === void 0 ? void 0 : _kc$tokenParsed2.email;\n};\nconst hasRole = roles => roles.some(role => _kc.hasRealmRole(role));\nconst UserService = {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  isLoggedIn,\n  getToken,\n  getTokenParsed,\n  updateToken,\n  getUsername,\n  getEmail,\n  hasRole\n};\nexport default UserService;","map":{"version":3,"names":["Keycloak","_kc","initKeycloak","onAuthenticatedCallback","init","onLoad","silentCheckSsoRedirectUri","window","location","origin","pkceMethod","then","authenticated","console","log","catch","error","doLogin","login","doLogout","logout","getToken","token","getTokenParsed","tokenParsed","isLoggedIn","updateToken","successCallback","getUsername","_kc$tokenParsed","preferred_username","getEmail","_kc$tokenParsed2","email","hasRole","roles","some","role","hasRealmRole","UserService"],"sources":["/home/manitcor/dev/matric-auth/examples/static-site-demo/src/services/UserService.js"],"sourcesContent":["import Keycloak from \"keycloak-js\";\n\nconst _kc = new Keycloak('/keycloak.json');\n\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\nconst initKeycloak = (onAuthenticatedCallback) => {\n  _kc.init({\n    onLoad: 'check-sso',\n    silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    pkceMethod: 'S256',\n  })\n    .then((authenticated) => {\n      if (!authenticated) {\n        console.log(\"User is not authenticated\");\n      } else {\n        console.log(\"User is authenticated\");\n      }\n      // Always call the callback, regardless of authentication status\n      onAuthenticatedCallback();\n    })\n    .catch((error) => {\n      console.error(\"Keycloak init error:\", error);\n      onAuthenticatedCallback();\n    });\n};\n\nconst doLogin = _kc.login;\n\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst getTokenParsed = () => _kc.tokenParsed;\n\nconst isLoggedIn = () => !!_kc.token;\n\nconst updateToken = (successCallback) =>\n  _kc.updateToken(5)\n    .then(successCallback)\n    .catch(doLogin);\n\nconst getUsername = () => _kc.tokenParsed?.preferred_username;\n\nconst getEmail = () => _kc.tokenParsed?.email;\n\nconst hasRole = (roles) => roles.some((role) => _kc.hasRealmRole(role));\n\nconst UserService = {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  isLoggedIn,\n  getToken,\n  getTokenParsed,\n  updateToken,\n  getUsername,\n  getEmail,\n  hasRole,\n};\n\nexport default UserService;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,aAAa;AAElC,MAAMC,GAAG,GAAG,IAAID,QAAQ,CAAC,gBAAgB,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA,MAAME,YAAY,GAAIC,uBAAuB,IAAK;EAChDF,GAAG,CAACG,IAAI,CAAC;IACPC,MAAM,EAAE,WAAW;IACnBC,yBAAyB,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG,wBAAwB;IAC5EC,UAAU,EAAE;EACd,CAAC,CAAC,CACCC,IAAI,CAAEC,aAAa,IAAK;IACvB,IAAI,CAACA,aAAa,EAAE;MAClBC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAC1C,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACtC;IACA;IACAX,uBAAuB,CAAC,CAAC;EAC3B,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAK;IAChBH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5Cb,uBAAuB,CAAC,CAAC;EAC3B,CAAC,CAAC;AACN,CAAC;AAED,MAAMc,OAAO,GAAGhB,GAAG,CAACiB,KAAK;AAEzB,MAAMC,QAAQ,GAAGlB,GAAG,CAACmB,MAAM;AAE3B,MAAMC,QAAQ,GAAGA,CAAA,KAAMpB,GAAG,CAACqB,KAAK;AAEhC,MAAMC,cAAc,GAAGA,CAAA,KAAMtB,GAAG,CAACuB,WAAW;AAE5C,MAAMC,UAAU,GAAGA,CAAA,KAAM,CAAC,CAACxB,GAAG,CAACqB,KAAK;AAEpC,MAAMI,WAAW,GAAIC,eAAe,IAClC1B,GAAG,CAACyB,WAAW,CAAC,CAAC,CAAC,CACff,IAAI,CAACgB,eAAe,CAAC,CACrBZ,KAAK,CAACE,OAAO,CAAC;AAEnB,MAAMW,WAAW,GAAGA,CAAA;EAAA,IAAAC,eAAA;EAAA,QAAAA,eAAA,GAAM5B,GAAG,CAACuB,WAAW,cAAAK,eAAA,uBAAfA,eAAA,CAAiBC,kBAAkB;AAAA;AAE7D,MAAMC,QAAQ,GAAGA,CAAA;EAAA,IAAAC,gBAAA;EAAA,QAAAA,gBAAA,GAAM/B,GAAG,CAACuB,WAAW,cAAAQ,gBAAA,uBAAfA,gBAAA,CAAiBC,KAAK;AAAA;AAE7C,MAAMC,OAAO,GAAIC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAEC,IAAI,IAAKpC,GAAG,CAACqC,YAAY,CAACD,IAAI,CAAC,CAAC;AAEvE,MAAME,WAAW,GAAG;EAClBrC,YAAY;EACZe,OAAO;EACPE,QAAQ;EACRM,UAAU;EACVJ,QAAQ;EACRE,cAAc;EACdG,WAAW;EACXE,WAAW;EACXG,QAAQ;EACRG;AACF,CAAC;AAED,eAAeK,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}